% part 3: Apply PCA then 2D scatter plot
train50 = load('part1_50_genes/golub_train50_processed.tsv');
train50 = transpose(train50);

PC = princomp(train50);
train50_2D = train50 * PC(:, 1:2);

[num_rows, cols] = size(train50);
train50classes = [zeros(num_rows, 1) train502D];

lastIndexOfClass1 = 27;
train50classes(1:lastIndexOfClass1, 1) = 1;
train50classes(lastIndexOfClass1+1:num_rows, 1) = 2;


%% PLOTTING %%
plotClass2D(train50classes, 1, 12);
% END PLOTTING %%


% part 4: Create parallel coordinate plot
hold on
parallelcoords(train50(1:lastIndexOfClass1, :), 'Color', 'r');
parallelcoords(train50(lastIndexOfClass1 + 1:num_rows, :), 'Color', 'b');
hold off

% part 5: Create 6 heat plots

clustergram(train50); % with default parameters

% 6 heat plots

% complete linkage ; pearson correlation coefficient
clustergram(train50, 'linkage', 'complete', 'ColumnPDist', 'correlation', 'Standardize', 'column');
% complete linkage ; euclidean distance
clustergram(train50, 'linkage', 'complete', 'ColumnPDist', 'euclidean', 'Standardize', 'column');

% single linkage ; pearson correlation coefficient
clustergram(train50, 'linkage', 'single', 'ColumnPDist', 'correlation', 'Standardize', 'column');
% single linkage ; euclidean distance
clustergram(train50, 'linkage', 'single', 'ColumnPDist', 'euclidean', 'Standardize', 'column');

% average linkage ; pearson correlation coefficient
clustergram(train50, 'linkage', 'average', 'ColumnPDist', 'correlation', 'Standardize', 'column');
% average linkage ; euclidean distance
clustergram(train50, 'linkage', 'average', 'ColumnPDist', 'euclidean', 'Standardize', 'column');

% part 7: Apply PCA and then 2D scatter plot
test50 = load('part1_50_genes/golub_train50_processed.tsv');
test50 = transpose(test50);
test50_2D = test50 * PC(:, 1:2);

[num_rows_test, cols_test] = size(test50);
test50classes = [zeros(num_rows_test, 1) test50_2D];
lastIndexInTestDataOfClass1 = 27;
test50classes(1:lastIndexInTestDataOfClass1, 1) = 1;
test50classes(lastIndexInTestDataOfClass1+1:num_rows_test, 1) = 2;

%% PLOTTING %%
plotClass2D(test50classes, 1, 12);
%% END PLOTTING %%

% part 8: use KNN with k=3,5,7 to classify - save figures
train_labels = zeros(num_rows, 1);
train_labels(1:27, 1) = 1;
train_labels(28:length(train_labels)) = 2;
test_labels = zeros(num_rows_test, 1);
test_labels(1:27, 1) = 1;
test_labels(28:length(test_labels), 1) = 2;

knn = ClassificationKNN.fit(train50_2D, train_labels, 'NumNeighbors', 3, 'Distance', 'euclidean');
class_label = predict(knn, test50_2D);
error_rate_3_neighbors = nnz(test_labels - class_label) / length(test_labels) * 100;
fprintf('knn error (3 neighbors): %.2f\n', error_rate_3_neighbors);

knn.NumNeighbors = 5;
class_label = predict(knn, test50_2D);
error_rate_5_neighbors = nnz(test_labels - class_label) / length(test_labels) * 100;

knn.NumNeighbors = 7;
class_label = predict(knn, test50_2D);
error_rate_7_neighbors = nnz(test_labels - class_label) / length(test_labels) * 100;





